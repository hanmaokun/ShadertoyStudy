/*!
 * <info>
 * <author>guil [ https://www.shadertoy.com/user/guil ]</author>
 * <name>Rocky coast</name>
 *
 * <description>
 *   A rocky coast, summertime.<br/>In fact, a sum of sine wave.
 * </description>
 *
 * <url>https://www.shadertoy.com/view/ltlGDX</url>
 *
 * <date>2015-03-09</date>
 *
 * <tags>3d, sea, rocks</tags>
 *
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)

uniform float scope; 					//! slider[1, 2.2, 100]

// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
// Created by S.Guillitte

#define CHANGE_SPEED 	0.06			/* terrain changing speed */
#define VIEW_SCOPE   	0.6				/* view scope. */

float time=-iGlobalTime;
float dh = 0.;


mat2 m2 = mat2(0.8,  0.6, -0.6,  0.8);

/*
 * shifting terrain model
 *
 * steal from Malhar's work: "Shifting Islands".
 * (https://www.shadertoy.com/view/MsBSDW)
 */
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec2 pos)
{
  vec3 v = vec3(pos * VIEW_SCOPE, iGlobalTime * CHANGE_SPEED);

  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy;
  vec3 x3 = x0 - D.yyy;

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  float result = 50.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );

  return result;
}

/*
 * main scene model.
 *
 * steal from guil's work: "Rocky coast".
 * (https://www.shadertoy.com/view/ltlGDX)
 */
float noise(in vec2 p){

    float res=0.;
    float f=1.;
	for( int i=0; i< 3; i++ )
	{
        p=m2*p*f+.6;
        f*=1.2;
        res+=sin(p.x+sin(2 * p.y));
	}
	return res/3;
}


float fbmabs( vec2 p ) {
	p *= 0.5;
	float f=1.;
	float r = 0.0;
    for(int i = 0;i<8;i++){
		r += abs(snoise( p*f ))/f;
	    f *=2.;
        p-=vec2(.01,.01)*r;
	}
	return r;
}

float sea( vec2 p )
{
	float f = 1.;
	float r = 0.0;
    for(int i = 0; i<8; i++){
		r += (1.-abs(noise( p*f +.12*time)))/f;
	    f *=2.;
        p-=vec2(-.01,.04)*r;
	}
	return r/4.+.5;
}

float rocks(vec2 p){
    return 1.35*fbmabs(p);
}

float map( vec3 p)
{
	float d1 =p.y-.1*p.z+.2-.4*fbmabs(scope*p.xz);
	float d2 =p.y-.4*sea(scope*p.xz);
    dh = d2-d1;
    float d = min(d1,d2);
	return d;

}

vec3 normalRocks(in vec2 p)
{
	const vec2 e = vec2(0.004, 0.0);
	return normalize(vec3(
		rocks(p + e.xy) - rocks(p - e.xy),
        .05,//.008,
		rocks(p + e.yx) - rocks(p - e.yx)
		));
}

vec3 normalSea(in vec2 p)
{
	const vec2 e = vec2(0.002, 0.0);
	return normalize(vec3(
		sea(p + e.xy) - sea(p - e.xy),
        .004,
		sea(p + e.yx) - sea(p - e.yx)
		));
}

vec3 sky(in vec2 p)
{
	return sin(vec3(1.7,1.5,1)+1. + .45*fbmabs(p*4.+.02*time));
}

float march(in vec3 ro, in vec3 rd)
{
	const float maxd = 30.0;
	const float precis = 0.001;
    float h = precis * 2.0;
    float t = 0.0;
	float res = -1.0;
    for(int i = 0; i < 128; i++)
    {
        if(h < precis*t || t > maxd) break;
	    h = map(ro + rd * t);
        t += h;
    }
    if(t < maxd) res = t;
    return res;
}

/*
 * main entry.
 */
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;
	vec3 col = vec3(0.);

    vec3 li = normalize(vec3(-2., 2., -2.));

    /*
     * world coordinates calc.
     * according to 'http://9bitscience.blogspot.jp/2013/07/raymarching-distance-fields_14.html';
     * this is looking straight down from 'up'.
     */
	vec3 right = vec3(1, 0, 0);
	vec3 front = vec3(0, 0, 1);
	vec3 ro = right * p.x + front * p.y;
	ro.y += 1.0;
	vec3 rd = normalize(cross(right, front));

	/*
	 * raymarching.
	 */
    float t = march(ro, rd);

    if(t > -0.001)
    {
        if(dh<0.)t-=dh;
        vec3 pos = ro + t * rd;

        float k=rocks(scope*pos.xz);

        vec3 nor = normalRocks(scope*pos.xz);
        float r = max(dot(nor, li), 0.05)/2.;
        if(dh < 0. && dh > -.08) r+=.5*exp(20. * dh);

        vec3 col1 =vec3(r*k*k, r*k, r*.8);
        if(dh<0.08){
        	vec3 nor = normalSea(scope*pos.xz);
        	nor = reflect(rd, nor);
        	col1 += pow(max(dot(li, nor), 0.0), 5.0)*vec3(.8);
        	col1 +=.2* sky(nor.yz);
        }
	    col = .1+col1;

	}

   	fragColor = vec4(col, 1.0);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
