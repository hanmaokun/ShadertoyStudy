/*!
 * <info>
 * <author>cenau [ https://www.shadertoy.com/user/cenau ]</author>
 * <name>Raymarch Engine - First Attempt</name>
 * 
 * <description>
 *   Simple Raymarch engine attempt<br/>based on bits from https://www.reddit.com/r/twotriangles/comments/1hy5qy/tutorial_1_writing_a_simple_distance_field/<br/>and
 *   https://www.shadertoy.com/view/ls2SWD and the articles on IQs site
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/llBSRm</url>
 * 
 * <date>2015-09-17</date>
 * 
 * <tags>distancefield, raymarch, probablyawful</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)


const float EPSILON = 0.001; // jump distance - go this far every iteration not to accidentally go through something
const int MAX_ITERATIONS = 100;	 // number of iterations - less is faster, more is more accurate
const float MAX_DISTANCE = 30.; // maximum distance to travel before giving up - things more than this distance will not be rendered!


float cubicPulse( float c, float w, float x ){
    x = abs(x - c);
    if( x>w ) return 0.0;
    x /= w;
    return 1.0 - x*x*(3.0-2.0*x);
}


float sphere(vec3 pos, float radius)
{
    return length(pos) - radius;
}

float opRep( vec3 p, vec3 c )
{
    vec3 q = mod(p,c)-0.5*c;
    return sphere( q,0.1 );
}


float distanceFunction(vec3 pos)
{
    float scene = opRep(pos,vec3(0.9));
    return scene;
    
}




vec3 getNormal(vec3 pos){ 
//sample_ points using the distance function and some swizzling- got this from 
//https://www.reddit.com/r/twotriangles/comments/1hy5qy/tutorial_1_writing_a_simple_distance_field/
    
    vec2 eps = vec2(0.0, EPSILON);
	vec3 normal = normalize(vec3(
    distanceFunction(pos + eps.yxx) - distanceFunction(pos - eps.yxx),
    distanceFunction(pos + eps.xyx) - distanceFunction(pos - eps.xyx),
    distanceFunction(pos + eps.xxy) - distanceFunction(pos - eps.xxy)));
    return normal;
}



vec3 render(vec2 st){
   

   
   // vec3 cameraPosition = vec3(4.,4.,1.); //camera position
    vec3 cameraPosition =  vec3(2.0, 2.0, 2.0);
	vec3 cameraTarget = vec3(0.0, 0.0, 0.0);
   
    vec3 cameraUp = normalize(vec3(0.,0.,1.));  //positive Z axis is 'up' 
    
    
   
    
	vec3 cameraDirection = normalize(cameraTarget - cameraPosition);
	
	vec3 cameraRight = normalize(cross(cameraUp,cameraDirection));

	cameraUp = normalize(cross(cameraDirection,cameraRight));
    
    vec3 rayDirection = normalize(cameraDirection+st.x*cameraRight+st.y*cameraUp);
    
    
    //raymarch loop
	float dist = distanceFunction(cameraPosition); //first distance to jump 
	
	float total = dist; //total distance travelled
	
	// march along ray
	for(int i = 0;i<MAX_ITERATIONS;i++){
		dist = distanceFunction(cameraPosition+rayDirection*total); //jump
		total += dist;						    // add jumped distance to total
		if(dist<EPSILON || dist>MAX_DISTANCE){continue;}   //break if object hit OR reached maximum distance
	}
	vec3 finalDist = cameraPosition+rayDirection*total; 
	vec3 colour;					
	if(dist<EPSILON){					 
		colour = getNormal(finalDist);         
									 
	}else{							 
		colour = vec3(0.0); 
    }
        
        
    return vec3(colour);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) 
{
	
    vec2 st = fragCoord.xy / iResolution.xy;	// normalise screen coords 
    st = (st-.5);								// centre the coordinate system from https://www.shadertoy.com/view/ls2SWD
    st.y /= (iResolution.x)/iResolution.y;	// add vertical space for aspect ratio thing - modified from above shader
	
    vec3 c = render(st); //raymarch!
  
	
	fragColor = vec4(c,1.0); //assign colours, with alpha. 
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
