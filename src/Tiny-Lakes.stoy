/*!
 * <info>
 * <author>rydrman [ https://www.shadertoy.com/user/rydrman ]</author>
 * <name>Tiny Lakes</name>
 * 
 * <description>
 *   First one ever, feedback welcome! Procedural geometry to create land and then
 *   water added over top. I hope to add more to this in the future.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MlX3Rl</url>
 * 
 * <date>2015-02-18</date>
 * 
 * <tags>procedural, raymarching, water</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
uniform sampler2D iChannel0; //! texture["Shadertoy/res/tex03.jpg"]

const float zNear = 0.01;
const float zFar = 350.0;
const float FOV = (35.0 / 180.0) * 3.14159;

const float planeX = 1000.0;
const float planeZ = 1000.0;
const float planeY = 10.0;
const vec3  fogColor     = vec3(0.9, 0.9, 0.9);
const vec3  waterColor   = vec3(0.1, 0.2, 0.9);
const vec3  groundColor0 = vec3(0.451, 0.361, 0.271);
const vec3  groundColor1 = vec3(0.949, 0.859, 0.361);
const vec3  groundColor2 = vec3(0.290, 0.718, 0.055);

//source unknown
float rand(vec3 v)
{
    return -1.0 + fract(sin(dot(v.xyz, vec3(12.9898, 78.233, 98.764))) * 43758.5453);
}

float map( float val, float startMin, float startMax, float endMin, float endMax )
{
    float t = (val - startMin) / (startMax - startMin);
    return endMin + t * (endMax - endMin);
}

vec3 rayMarch( vec3 start, vec3 dir, float far )
{
    dir = normalize( dir );
    
    vec3 pos = start;
    vec2 uv;
    for(int i = 0; i < 200; ++i)
    {
        uv = vec2( 
            map( mod(pos.x + planeX * 0.5, planeX), 0.0, planeX, 0.0, 1.0), 
            map( mod(pos.z + planeZ * 0.5, planeZ), 0.0, planeZ, 0.0, 1.0)
        );
        float val = texture2D(iChannel0, uv).r;
        val = map(val, 0.0, 1.0, 0.0, -planeY);
        float dif = pos.y - val;
        if(dif < 0.1)
            return pos;
        pos += dir * 0.6 * dif;
    }
    return start + dir * far;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 camPos = vec3( iGlobalTime * 1.0,  40.0, iGlobalTime * 10.0 );
    
    //0 - 1
	vec2 uv = fragCoord.xy / iResolution.xy;
    
    //calculate field of view
    float aspect = iResolution.x / iResolution.y;
    float FOVy = FOV / aspect;
    
    //add a little more to change look direction
    float angleH = 0.1 + map( uv.x, 0.0, 1.0, -FOV * 0.5, FOV * 0.5 );
    float angleV = -0.2 + map( uv.y, 0.0, 1.0, -FOVy * 0.5, FOVy * 0.5 );
    
    //project out of camera
    vec3 direction = vec3( sin( angleH ), sin( angleV ), cos( angleH ) ); 
    
    vec3 intersect = rayMarch( camPos, direction, zFar );
    float height = (planeY + intersect.y) / planeY;
    
    float dist = length( intersect - camPos );
        
    float fog = clamp( map( dist, zFar * 0.75, zFar, 0.0, 1.0 ), 0.0, 1.0);
    
    float water = height < 0.5 ? 1.0 : 0.0;
    
    float col0 = clamp(map(height, 0.0, 0.5, 1.0, 0.0), 0.0, 1.0);
    float col1 = clamp(1.0 - abs(height * 2.0 - 1.0), 0.0, 1.0);
    float col2 = clamp(map(height, 0.5, 1.0, 0.0, 1.0), 0.0, 1.0);
    col0 *= col0;
    col1 *= col1;
    col2 *= col2;
    
    vec3 vNoise = floor(intersect * 5.0) * 0.2;
    float noise = rand(vNoise);
    vec3 noiseColor = 0.05 * vec3(1.0, 1.0, 1.0) * noise;
    
    vec3 groundComp = noiseColor + col0 * groundColor0 + col1 * groundColor1 + col2 * groundColor2;
    vec3 color = groundComp * (1.0 - 0.5 * water) + waterColor * water;
    
    fragColor = vec4(((1.0 - fog) * color * height + fog * fogColor).xyz, 1.0);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}