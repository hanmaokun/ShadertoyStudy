/*!
 * <info>
 * <author>clayjohn [ https://www.shadertoy.com/user/clayjohn ]</author>
 * <name>Cartoon Nightscape</name>
 * 
 * <description>
 *   Made a quick landscape based on the art style of bojack horseman. It's strange.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/XljSzw</url>
 * 
 * <date>2015-09-17</date>
 * 
 * <tags>noise, clouds, cartoon, stars, moon, bojack</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
uniform sampler2D iChannel0; //! texture["Shadertoy/res/tex12.png"]

vec2 hash2(vec2 p ) {
   return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);   
}

float hash(vec2 p) {
  return fract(sin(dot(p, vec2(43.232, 75.876)))*4526.3257);   
}


float f(vec2 p) {
  float h = 0.0;
  float a = 0.5;
    for (int i = 0;i<3;i++) {
      h+= texture2D(iChannel0, p).x*a; 
      p*=2.0;
      a*=0.5;
    }
  return sqrt(h);
}

vec3 stars(vec2 p) {
    vec2 n = floor(p);
    vec3 c = vec3(0.0);
    for (int i = -1;i<=1;i++) {
        for (int j = -1;j<=1;j++) {
            vec2 g = vec2(i, j);
            g += hash2(n+g)*0.5;
            c= mix(vec3(hash(n+g)),  c, smoothstep(0.04, 0.04, length(p-n+g)));
            
        }
    }
    return c;
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float time = iGlobalTime*0.3;
	vec2 uv = fragCoord.xy / iResolution.yy*2.0;
    uv.y -= 1.0;
    uv.x -=1.6;
    uv.x/= iResolution.x/iResolution.y;
    vec3 col;
    float h = f(vec2(uv.x*0.01, 0.1+time*0.001));
    col = mix(vec3(0.0), vec3(1.0, 0.0, 1.0), smoothstep(0.018, 0.03, h-uv.y-1.0));
    float nh = mix(0.0, f(vec2(uv.x*0.02, time*0.001)*0.95+0.05*f(vec2(uv.x*0.001, 0.5))), (uv.x+1.0)*0.5);
    col = mix(col, mix(vec3(0.0), vec3(0.5, 0.0, 1.0), smoothstep(0.018, 0.03, nh-uv.y-1.0)), smoothstep(uv.y-0.01, uv.y, nh-1.));
    //sky
    vec3 sky = vec3(0.01, 0.01, 0.1);
    vec2 moon = vec2(sin(time)*1.2, cos(time)*1.5-1.0);//vec2(-0.5, 0.1)
    float l = length(uv*vec2(iResolution.x/iResolution.y, 1.0)-moon);
    //stars
    sky = mix(sky, vec3(1.0, 1.0, 0.0), smoothstep(0.5, 1.0, stars((uv+vec2(time*0.1, time*0.3))*8.0)));
    //moon
    sky = mix(vec3(0.8+0.2*smoothstep(0.58, 0.61, f((uv-moon)*0.05))+smoothstep(0.15, 0.25, l)*0.2), sky, smoothstep(0.24, 0.25, l));
    //clouds
    sky = mix(sky, vec3(0.35, 0.0, 0.7), smoothstep(0.74+cos(time*0.2)*0.1, 0.75+cos(time*0.2)*0.1, f((uv+vec2(time*0.1, time*0.01))*0.03*vec2(0.4, 1.0))));

    col = mix(sky, col, smoothstep(uv.y-1.01, uv.y-1.0, max(h, nh)-2.0));
    col = pow(col, vec3(0.45));
	fragColor = vec4(col,1.0);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}