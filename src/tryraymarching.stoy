/*!
 * <info>
 * <author>candycat [ https://www.shadertoy.com/user/candycat ]</author>
 * <name>tryraymarching</name>
 * 
 * <description>
 *   first try.
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdtGDM</url>
 * 
 * <date>2015-12-15</date>
 * 
 * <tags>raymarching</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)


#define AA 1
#define PRECIS 0.001
#define DMAX 30.0
#define EDGE_WIDTH 0.4
#define EDGE_SMOOTH 0.1

float hash(float n) {
    return fract(sin(n)*43758.5453);
}

//=============

float fSphere(vec3 p) {
    return length(p) - 0.6;
}

float fBox(vec3 p, vec3 b) {
  return length(max(abs(p)-b,0.0))-0.2;
}

float fCylinder(vec3 p, vec3 c) {
  return length(p.xz-c.xy)-c.z;
}

float fTorus(vec3 p, vec2 t) {
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}

//=============

vec3 rotx(vec3 p, float a)
{
    float s = sin(a), c = cos(a);
    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);
}
vec3 roty(vec3 p, float a)
{
    float s = sin(a), c = cos(a);
    return vec3(c*p.x + s*p.z, p.y, -s*p.x + c*p.z);
}

vec2 map(vec3 pos) {
    vec3 id = floor((pos+2.0)/4.0);
    float rid = hash(dot(id, vec3(0.1, 0.4, 0.9)))+0.5;
    pos = mod( pos+2.0, 4.0)-2.0;
    pos = rotx(pos, iGlobalTime * 0.5 + id.x * id.y * 1.7 + sin(iGlobalTime));
    pos = roty(pos, iGlobalTime * 0.5 + id.y * id.z * 1.7 + cos(iGlobalTime));
    //return vec2(fBox(pos, vec3(0.3)), rid);
    //return vec2(fTorus(pos, vec2(0.3, 0.4)), rid);
    //return vec2(fCylinder(pos, vec3(0.1, 0.1, 0.3)), rid);
    return vec2(fSphere(pos), rid);
}

vec3 normal(vec3 pos) {
    vec2 eps = vec2(0.001, 0.0);
    return normalize(vec3(	map(pos + eps.xyy).x - map(pos - eps.xyy).x,
                    map(pos + eps.yxy).x - map(pos - eps.yxy).x,
                         	map(pos + eps.yyx).x - map(pos - eps.yyx).x));
}
    
vec2 render(vec3 ro, vec3 rd) {
    float t = 0.0;
    float id = -1.0;
    float lastD = 0.0;
    for (int i = 0; i < 50; i++) {
       	vec2 res = map(ro+t*rd);
        t += res.x;
        id = res.y;
        if (res.x < PRECIS || t > DMAX) break; 
    }
    
    if (t > DMAX) id = -1.0;
    
    return vec2(t, id);
}

vec3 marching(vec3 ro, vec3 rd) {
    vec3 light = normalize(vec3(0.6, 0.8, -0.3));
    float sun = dot(-rd, light);
    sun = 0.5 * sun + 0.5;
    vec3 bg = vec3(0.65,0.45,0.4)*sun+vec3(0.2, 0.2, 0.3);
    vec3 col = bg;
    
    vec2 res = render(ro, rd);
    if (res.y > -0.5) {
        // lighting
        vec3 nor = normal(ro+res.x*rd);
        vec3 view = -rd;
        
        vec3 amb = vec3(0.05);
        
        float dif = dot(nor, light);
        dif = dif * 0.5 + 0.5;
        
        vec3 h = normalize(light - rd);
        float spec = pow(clamp(dot(nor, h), 0.0, 1.0), 50.0) * 0.9;
        
        float edge = clamp(dot(nor, view), 0.0, 1.0);
        edge = mix(0.0, 1.0, smoothstep(EDGE_WIDTH-EDGE_SMOOTH, EDGE_WIDTH, edge));
        
        vec3 scol = vec3(0.3+hash(res.y*0.2),0.3+hash(res.y*0.4),0.3+hash(res.y*0.6));
        col = amb + (dif + spec) * scol * pow(sun, 0.2) * edge;
    }
    
    col = mix(col, bg, smoothstep(10.0, DMAX, res.x));
    return col;
}

vec3 rotrd(vec3 rd, vec2 mouse) {
    rd = rotx(rd,sin(iGlobalTime*0.12+sin(iGlobalTime*.5)*1.)+mouse.x*5.0);
    rd = roty(rd,sin(iGlobalTime*0.2)*0.5+mouse.y*5.0);
    return rd;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 p = fragCoord.xy / iResolution.xy;
    p = -1.0 + 2.0 * p;
    p.x *= iResolution.x/iResolution.y;
    vec2 mouse = iMouse.xy/iResolution.xy;
    mouse = -1.0 * 2.0 * mouse;
    
    vec2 delta = vec2(1.0/iResolution.y, 0.0);
    vec3 ro, rd;
    vec3 col = vec3(0.0, 0.0, 0.0);
    
    ro = vec3(2.0, 2.0, 0.0) + iGlobalTime*2.0;
    for (int i = -AA; i <= AA; i++) {
        for (int j = -AA; j <= AA; j++) {
            rd = normalize(vec3(p.xy+1.0/iResolution.y*vec2(i,j), 1.5));
    		rd = rotrd(rd, mouse);
    		col += marching(ro, rd);
        }
    }
    col /= float((2*AA+1)*(2*AA+1));
    
    //col *= clamp(1.0-length(p)*0.3,0.0,1.0);
    
    //col = pow(col, vec3(0.4545));
    
	fragColor = vec4(col,1.0);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
