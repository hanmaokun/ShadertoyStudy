uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iGlobalTime;           // shader playback time (in seconds)
uniform float iChannelTime[4];       // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)

uniform float 	  radius_out;			//!slider [0, 0.2, 1]
uniform float 	  radius_in;			//!slider [0, 0.1, 1]
uniform float 	  torus_h;				//!slider [0, 0.6, 6]

// noise func
float hash( float n ) { return fract(sin(n)*753.5453123); }
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);

    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}

// models
float sdSphere( vec3 p, float s )
{
    return length(p)-s;
}

float sdTorus( vec3 p, vec2 t )
{
  return length( vec2(length(p.xz)-t.x, p.y) )-t.y;
}

float opS( float d1, float d2 )
{
    return max(-d2,d1);
}

vec2 map( in vec3 pos )
{
	vec2 res =
		vec2(opS(
				 sdSphere(pos-vec3(0., 0., 0.), 0.55),
				 sdTorus( pos-vec3(0., torus_h, 0.), vec2(radius_out, radius_in) ) -
				 0.08 * noise(10*pos+pos * .02)
			 )
		);

    return res;
}

// raymarch
vec2 raymarch( in vec3 ro, in vec3 rd )
{
    float tmin = 1.0;
    float tmax = 20.0;

	float precis = 0.002;
    float t = tmin;
    float m = -1.0;
    for( int i=0; i<50; i++ )
    {
	    vec2 res = map( ro+rd*t );
        if( res.x<precis || t>tmax ) break;
        t += res.x;
	    m = res.y;
    }

    if( t>tmax ) m=-1.0;
    return vec2( t, m );
}

// render
float softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )
{
	float res = 1.0;
    float t = mint;
    for( int i=0; i<16; i++ )
    {
		float h = map( ro + rd*t ).x;
        res = min( res, 8.0*h/t );
        t += clamp( h, 0.02, 0.10 );
        if( h<0.001 || t>tmax ) break;
    }
    return clamp( res, 0.0, 1.0 );

}

vec3 calcNormal( in vec3 pos )
{
	vec3 eps = vec3( 0.001, 0.0, 0.0 );
	vec3 nor = vec3(
	    map(pos+eps.xyy).x - map(pos-eps.xyy).x,
	    map(pos+eps.yxy).x - map(pos-eps.yxy).x,
	    map(pos+eps.yyx).x - map(pos-eps.yyx).x );
	return normalize(nor);
}

float calcAO( in vec3 pos, in vec3 nor )
{
	float occ = 0.0;
    float sca = 1.0;
    for( int i=0; i<5; i++ )
    {
        float hr = 0.01 + 0.12*float(i)/4.0;
        vec3 aopos =  nor * hr + pos;
        float dd = map( aopos ).x;
        occ += -(dd-hr)*sca;
        sca *= 0.95;
    }
    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );
}

vec3 shade(vec2 res, vec3 ro, vec3 rd) {
    vec3 col = vec3(0.7, 0.9, 1.0);

	float t = res.x;
	float m = res.y;
	if( m>-0.5 )
	{
		vec3 pos = ro + t*rd;
		vec3 nor = calcNormal( pos );
		vec3 ref = reflect( rd, nor );

		// material
		col = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );

		if( m<1.5 )
		{
			col = vec3(1.0);
			//float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);
			//col = 0.4 + 0.1*f*vec3(1.0);
		}

		// lighitng
		float occ = calcAO( pos, nor );
		vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );
		float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );
		float dif = clamp( dot( nor, lig ), 0.0, 1.0 );
		float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);
		float dom = smoothstep( -0.1, 0.1, ref.y );
		float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );
		float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);

		dif *= softshadow( pos, lig, 0.02, 2.5 );
		dom *= softshadow( pos, ref, 0.02, 2.5 );

		vec3 lin = vec3(0.0);
		lin += 1.20*dif*vec3(1.00,0.85,0.55);
		lin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;
		lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;
		lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;
		lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;
		lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;
		col = col*lin;

		col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );

	}

	return vec3( clamp(col,0.0,1.0) );
}

// gen world coordinates
mat3 setCamera( in vec3 ro, in vec3 ta, float cr )
{
	vec3 cw = normalize(ta-ro);
	//vec3 cp = vec3(sin(cr), cos(cr),0.0);
	vec3 cp = vec3(0.0, 0.0, 1.0);
	vec3 cu = normalize( cross(cw,cp) );
	vec3 cv = normalize( cross(cu,cw) );
    return mat3( cu, cv, cw );
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
	vec2 q = fragCoord.xy/iResolution.xy;
	vec2 p = -1.0+2.0*q;
	p.x *= iResolution.x/iResolution.y;
	vec2 mo = iMouse.xy/iResolution.xy;
	mo -= vec2(0.5, 0.5); mo *= 3.0;
	float time = 15.0 + iGlobalTime;
	float viewer_height = 1.8;

	float ang_xy = acos(mo.x/viewer_height);
	float ang_zy = acos(mo.y/viewer_height);

	vec3 ro = vec3( p.x + viewer_height*cos(ang_zy),
					viewer_height * sin(abs(ang_xy)>abs(ang_zy)? ang_xy:ang_zy),
					p.y - viewer_height*cos(ang_xy)
	);

	vec3 ta = vec3( 0., 0., 0.);
	mat3 ca = setCamera( ro, ta, 0.0 );
	vec3 rd = ca * normalize( vec3(p.yx, 1.0) );

    vec2 res = raymarch( ro, rd );
    vec3 col = shade(res, ro, rd);

	col = pow( col, vec3(0.4545) );

    fragColor=vec4( col, 1.0 );
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
