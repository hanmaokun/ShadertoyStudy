/*!
 * <info>
 * <author>Malhar [ https://www.shadertoy.com/user/Malhar ]</author>
 * <name>Shifting Islands</name>
 *
 * <description>
 *   Islands appearing and disappearing
 * </description>
 *
 * <url>https://www.shadertoy.com/view/MsBSDW</url>
 *
 * <date>2014-09-30</date>
 *
 * <tags>procedural, 2d</tags>
 *
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */
uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform sampler2D iChannel0; //! texture["Shadertoy/res/tex16.png"]

uniform float xz_ratio;		//!slider [0, 0.3, 3.0]

//#define INTEGRAL_DISTANCE_COMPUTE
#define CHANGE_SPEED 0.1				/* terrain changing speed */
#define VIEW_SCOPE   0.4				/* view scope. */

vec2 uv;
vec3 cameraOrigin, rayDir;
float dh_car = 0.0;
float cur_car_dir_ang_xz = 0.0;
float cur_car_dir_ang_xy = 0.0;
float cur_car_dir_ang_yz = 0.0;
vec3 terrain_normal = vec3(0.0);
vec3 terrain_normal_xy = vec3(0.0);
vec3 terrain_normal_yz = vec3(0.0);
vec3 carPos = vec3(1.1, 0.0, 0.0);

/*=======================proto function declarations===========================*/
float terrain_map(vec3 p);
float map(vec3 p);

/*=======================shading utils===========================*/
float sfract(float n){ return smoothstep(0.0,1.0,fract(n)); }
float rand(vec3 n){ return fract(sin(dot(n,vec3(5.3357,-5.8464,5.7645)))*256.75+0.325); }
float noise(vec3 n)
{
    float h1 = mix(rand(vec3(floor(n.x),floor(n.y),floor(n.z))),rand(vec3(ceil(n.x),floor(n.y),floor(n.z))),sfract(n.x));
    float h2 = mix(rand(vec3(floor(n.x),ceil(n.y),floor(n.z))),rand(vec3(ceil(n.x),ceil(n.y),floor(n.z))),sfract(n.x));
    float s1 = mix(h1,h2,sfract(n.y));

    h1 = mix(rand(vec3(floor(n.x),floor(n.y),ceil(n.z))),rand(vec3(ceil(n.x),floor(n.y),ceil(n.z))),sfract(n.x));
    h2 = mix(rand(vec3(floor(n.x),ceil(n.y),ceil(n.z))),rand(vec3(ceil(n.x),ceil(n.y),ceil(n.z))),sfract(n.x));
    float s2 = mix(h1,h2,sfract(n.y));
    return mix(s1,s2,sfract(n.z));
}

vec3 doMaterial( in vec3 pos, in vec3 nor )
{
    float tm = (noise(vec3(pos.xz/2.0,0.0)) + noise(vec3(pos.xz*4.0,0.0)))*0.25;
    float th = (tm+noise(vec3(pos.xz,0.0))*0.25 + noise(vec3(pos.xz/2.0,0.0))*0.75);

    float tn = noise(pos*64.0)*0.05 + noise(pos*32.0)*0.05 + noise(pos*16.0)*0.05 + 0.05;
    return mix(vec3(0.035, tn, 0.025), vec3(tn), clamp(pow(th, 8.0)*0.2, 0.0, 1.0));
}

float calcSoftshadow( in vec3 ro, in vec3 rd )
{
    float res = 1.0;
    float t = 0.5;                 		// selfintersection avoidance distance
	float h = 1.0;
    for( int i=0; i<4; i++ )         	// 40 is the max numnber of raymarching steps
    {
        h = map(ro + rd*t);
        res = min( res, 64.0*h/t );   	// 64 is the hardness of the shadows
		t += clamp( h, 0.02, 2.0 );   	// limit the max and min stepping distances
    }
    return clamp(res, 0.8, 1.0);
}

vec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )
{
    vec3 lin = vec3(0.0);

    vec3  lig = normalize(vec3(1.0, 2.7, 0.09));
    float dif = max(dot(nor, lig), 0.0);
    float sha = 0.0; if( dif > 0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );

    lin += dif * vec3(4.00, 4.00, 4.00) * sha;
    lin += vec3(0.5);

    vec3 col = mal * lin;

	col = mix(vec3(0.9), col, 1.0 - clamp(dis * dis / 90.0, 0.0, 1.0));

    return col;
}

/*=======================raymarching models===========================*/
float smin(float a,float b,float k){float h=clamp(0.5+0.5*(b-a)/k,0.0,1.0);return b+h*(a-b-k+k*h);}
vec3 cp1;
mat2 cm1;
vec3 rc=vec3(0.7,0.26,1.5);

mat2 trmx,mrmx;//the wheel spinners
float minL,cc3,cc4;//car config
vec4 trpc,cc;//color and stuff
bool bColoring=false;

mat3 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);
}

float DE(in vec3 p0){
	p0 -= carPos;

	/* rotation in x-z plane. */
	float a_xz = atan(p0.z, p0.x) - cur_car_dir_ang_xz + 3.14/2;
	float l = sqrt(p0.x * p0.x + p0.z * p0.z);
	p0 = vec3(l * cos(a_xz), p0.y, l * sin(a_xz));
	p0.xz *= 6;

    vec3 up_y = vec3(0., 1., 0.);
	vec3 axis = normalize(cross(up_y, terrain_normal));
	float rot_ang = asin(dot(up_y, terrain_normal) / (length(terrain_normal) * length(up_y)));
	rot_ang *= -1;
	p0 = rotationMatrix(axis, rot_ang) * p0;

	/* rotation in x-y plane */
	/*terrain_normal_xy.x = terrain_normal.x / sin(cur_car_dir_ang_xz);
	terrain_normal_xy.y = terrain_normal.y;
	cur_car_dir_ang_xy = atan(terrain_normal_xy.y, terrain_normal_xy.x);
	float a_xy =  atan(p0.y, p0.x) - cur_car_dir_ang_xy + 3.14/2;
	l = sqrt(p0.x * p0.x + p0.y * p0.y);
	p0 = vec3(l * cos(a_xy), l * sin(a_xy), p0.z);*/

	/* rotation in y-z plane */
	/*terrain_normal_yz.y = terrain_normal.y;
	terrain_normal_yz.z = terrain_normal.z / sin(cur_car_dir_ang_xz);
	cur_car_dir_ang_yz = atan(terrain_normal_yz.y, terrain_normal_yz.z);
	float a_yz =  atan(p0.y, p0.z) - cur_car_dir_ang_yz + 3.14/2;
	l = sqrt(p0.y * p0.y + p0.z * p0.z);
	p0 = vec3(p0.x, l * sin(a_yz), l * cos(a_yz));*/

	/* car model*/
	vec3 p=p0;
	p.y += 1.24;
	float d=length(max(vec3(abs(p.x)-0.35,length(p.yz)-1.92,-p.y+1.4),0.0))-0.05;
	d=max(d,p.z-1.0);
	p=p0+vec3(0.0,-0.22,0.39);
	p.xz=abs(p.xz);
	float w1=0.24,w2=cc.z,dL=length(p+vec3(-0.3,0.0,-1.18-p0.z*0.17))-0.05;
	p.xz-=vec2(cc.w,1.0);
	if(p0.z<0.0){
		w1=cc.x;w2=cc.y;
		p.xy=mrmx*p.xy;
	}else p.xz=mrmx*p.xz;
	p.x=abs(p.x);
	float r=length(p.yz);
	d=smin(d,length(vec2(max(max(p.x-w2,0.0),-p.y-0.08),r-w1))-0.02,0.25);
	float d1=length(vec2(max(p.x-w2-0.01,0.0),r-w1+0.05))-0.04;
	if(p0.z<0.0)p.yz=p.yz*trmx;
	else p.yz=trmx*p.yz;
	float d2=min(min(abs(p.z+p.y),abs(p.z-p.y)),min(abs(p.z),abs(p.y)));//8 blades
	d2=max(r-w1+cc3,max(d2-0.003,p.x-w2+0.04));
	d2=min(d2,dL);
	minL=min(minL,d2);//catch the minimum distance to the glowing things
	if(bColoring){
		if(d2<d && d2<d1){trpc+=vec4(1.0,0.6,0.5,256.0);}//spokes/turbines
		else if(d1<d){trpc+=vec4(vec3(clamp(1.0-(r-w1+0.09)*100.0,0.0,1.0)),256.0);}
		else {//the car's body
			if(p0.z<-1.04 || (abs(p0.y-0.58)>0.05-p0.z*0.09 || p0.z>0.25) && length(max(abs(p0.xz+vec2(0.0,-0.27))-vec2(0.18,0.39),0.0))>0.1)trpc+=vec4(1.0,0.9,0.4,16.0);
			else trpc += vec4(0.1, 0.2, 0.3, 2.0);//the windshield
		}
	}
	return min(d,min(d1,d2));
}


vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
float snoise(vec3 v)
{
  //v.z = 0;
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

  // First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

  // Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

  // Gradients: 7x7 points over a square, mapped onto an octahedron.
  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  	//  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    			// mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

  //Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

  //Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
}

float terrain_map( vec3 p ) {
    vec3 drpz = vec3(p.xz * VIEW_SCOPE, iGlobalTime * CHANGE_SPEED);
	return p.y - snoise(drpz);
}

float map( vec3 p)
{
    vec3 drpz = vec3(p.xz * VIEW_SCOPE, iGlobalTime * CHANGE_SPEED);
	float d_terrain = p.y - snoise(drpz);
	float d_car = DE(p);
	dh_car = d_car - d_terrain;
	return min(d_car, d_terrain);
}

float march(in vec3 ro, in vec3 rd)
{
	const float maxd = 30.0;
	const float precis = 0.001;
    float h = precis * 2.0;
    float t = 0.0;
	float res = -1.0;
    for(int i = 0; i < 64; i++)
    {
        if(h < precis*t || t > maxd) break;
	    h = map(ro + rd * t);
        t += h;
    }
    if(t < maxd) res = t;
    return res;
}

/*=================================================================*/
void setConfig(){
	float t=mod(iGlobalTime,10.0);
	t=t-5.0;
	if(t>4.0)t=5.0-t;
	t=clamp(t,0.0,1.0);
	cc3=mix(0.06,-0.03,t);
	cc4=mix(0.0,-0.5,t);
	cc=mix(vec4(0.24,0.07,0.1,0.55),vec4(0.33,0.04,0.22,0.72),t);

	float tim=iGlobalTime*5.0,a=cc4*3.0;
	trmx=mat2(cos(tim),sin(tim),-sin(tim),cos(tim));//the turbine spinner
	mrmx=mat2(cos(a),sin(a),-sin(a),cos(a));

	// car position calc
	float ang = mod(iGlobalTime/2, 360.0) + 3.14;
	float car_pos_x = (1.1 * 0.8)/sqrt((0.64 + 1.21*tan(ang)*tan(ang)));
	if((ang > 3.14/2) && (ang < 3 * 3.14/2)) {
		car_pos_x *= -1.0;
	}
	float car_pos_z = car_pos_x * tan(ang);
    vec3 pos = vec3(vec2(car_pos_x, car_pos_z) * VIEW_SCOPE, iGlobalTime * CHANGE_SPEED);
	float car_pos_y = snoise(pos);
	carPos = vec3(car_pos_x, car_pos_y, car_pos_z);
	cur_car_dir_ang_xz = atan(-0.64 * car_pos_x, 1.21 * car_pos_z);
	vec2 eps = vec2(0.0, 0.01);
	terrain_normal = normalize(
			vec3(
				terrain_map(vec3(carPos + eps.yxx)) - terrain_map(vec3(carPos - eps.yxx)),
				terrain_map(vec3(carPos + eps.xyx)) - terrain_map(vec3(carPos - eps.xyx)),
				terrain_map(vec3(carPos + eps.xxy)) - terrain_map(vec3(carPos - eps.xxy))
			)
	);
}

void initWorldCoords(in vec2 fragCoord) {
    uv = fragCoord.xy / iResolution.xy;
	uv = 2*uv - 1;
	uv.x *= iResolution.x/iResolution.y;
    cameraOrigin = vec3(0.0, 2, -0.7);
	vec3 cameraTarget = vec3(0, 0.0, 0);
	vec3 upDirection = vec3(0.0, -1.0, 0.0);
	vec3 cameraDir = normalize(cameraTarget - cameraOrigin);
	vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));
	vec3 cameraUp = cross(cameraDir, cameraRight);
    //rayDir = cameraDir;
    rayDir = normalize(cameraRight * uv.x + cameraUp * uv.y + cameraDir);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	initWorldCoords(fragCoord);

	setConfig();
	float tim=iGlobalTime*5.0,a=cc4*3.0;
	trmx=mat2(cos(tim),sin(tim),-sin(tim),cos(tim));//the turbine spinner
	mrmx=mat2(cos(a),sin(a),-sin(a),cos(a));
	tim=iGlobalTime*0.5;

    float t = march(cameraOrigin, rayDir);

	/* ==================shading==================*/
    vec3 col = vec3(1.0);

    if(t > -0.001)
    {
        vec3 pos = cameraOrigin + t * rayDir;
        float height = pos.y;
        float noise = mix(0.6, 1.0, height);
        col = vec3(noise);
    	vec3 L=normalize(vec3(0.5,0.5,-0.5));

		vec2 eps = vec2(0.0, 0.01);
		vec3 normal = normalize(
				vec3(
					map(vec3(pos + eps.yxx)) - map(vec3(pos - eps.yxx)),
					map(vec3(pos + eps.xyx)) - map(vec3(pos - eps.xyx)),
					map(vec3(pos + eps.xxy)) - map(vec3(pos - eps.xxy))
				)
		);
		if(dh_car < 0) {
			vec3 p = pos;
			vec2 v=vec2(2.0/iResolution.y,0.0);
			trpc=vec4(0.0);bColoring=true;
			vec3 N=normalize(vec3(-DE(p-v.xyy)+DE(p+v.xyy),-DE(p-v.yxy)+DE(p+v.yxy),-DE(p-v.yyx)+DE(p+v.yyx)));
			col=trpc.rgb*0.1666*max(0.2,0.25+0.75*dot(N,L));
			col*=mix(vec3(0.5,0.5,1.0),vec3(1.0,1.0,0.5),abs(dot(rayDir,N)));
			col+=vec3(1.0,0.5,0.0)*pow(max(0.0,dot(reflect(rayDir,N),L)),trpc.a);
		}else {
			vec3 mal = doMaterial( pos, normal );
			col = doLighting( pos, normal, rayDir, t, mal );

			float pwa = 1.21, pwb = 0.64;
			float pwx = uv.x * uv.x, pwy = uv.y * uv.y;
			//float distance = pwx/pwa + pwy/pwb;
			float x1 = sqrt(pwa*pwb*pwx / (pwb*pwx + pwa*pwy));
			float x2 = -x1;
			float x0 = uv.x * x1 > 0 ? x1:x2;
			float z0 = uv.y * x0 / uv.x;
			vec2 uv_c = vec2(x0, z0);
			if(distance(uv_c, uv) < 0.2) {
				float y0 = snoise(vec3(uv_c * VIEW_SCOPE, iGlobalTime * CHANGE_SPEED));
				float dist = distance(vec3(uv.x, height, uv.y),
										vec3(x0, y0, z0));
				float d_abs = abs(dist);
				col = mix(vec3(0.2 - d_abs * 0.5), col, pow(smoothstep(0.0, 0.2, d_abs), 6));
				float a = atan(z0, x0);
				a = mod(a*39.1, 3.0);
				if(a > 1.0) {
					col = mix(vec3(1.0), col, smoothstep(0, 0.008, d_abs));
				}
				if(d_abs > 0.156) {
					col = mix(vec3(1.0), col, smoothstep(0.156, 0.163, d_abs));
				}
			}
		}
    }

    fragColor = vec4(col, 1.0);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
