/*!
 * <info>
 * <author>avix [ https://www.shadertoy.com/user/avix ]</author>
 * <name>Crab II</name>
 * 
 * <description>
 *   Version 2 of previous shader. Simplified floor, added shadow and quasi motion...<br/>
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/MdBGDy</url>
 * 
 * <date>2014-02-21</date>
 * 
 * <tags>3d, raymarch, animal</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
uniform sampler2D iChannel1; //! texture["Shadertoy/res/tex06.jpg"]
uniform sampler2D iChannel0; //! texture["Shadertoy/res/tex09.jpg"]

float sdCylinder(vec3 p, vec2 h) {
    return max( length(p.xz)-h.x, abs(p.y)-h.y );
}

vec2 rot2(vec2 k, float t) {
    return vec2(cos(t)*k.x-sin(t)*k.y,sin(t)*k.x+cos(t)*k.y);
}

/***********************************************/
float smine(float a, float b, float k) {
    float res = exp( -k*a ) + exp( -k*b );
    return -log( res )/k;
}
/***********************************************/
float body(vec3 p) {
    p.y-=0.05;
    vec3 q=p;
    /* main */
    p+=vec3( -sin(p.x*1.0)*0.4, sin(p.y*4.5)*0.3, 0.1);
  float m=length(p)-0.55;
    /* back */
    q+=vec3( -sin(q.x*1.0)*0.4, 0.10, -0.4);
    return smine(m,length(q)-0.18, 12.0);
}

float eyesticks(vec3 p) {
    p+=vec3(-0.2, -0.2, 0.35+sin(p.y));
  float l=sdCylinder(p, vec2(0.03,0.02));
    p.x+=0.4;
    return min(l,sdCylinder(p, vec2(0.03,0.02)));
}

float eyes(vec3 p) {
    p+=vec3(-0.2, -0.22, 0.57);
  float l=length(p)-0.03;
    p.x+=0.4;
    return min(l,length(p)-0.03);
}

float clamps(vec3 p) {
    vec3 q=p;
    p.x-=1.8 + sin(p.z*1.1);
    p.z=p.z +0.7 + cos(p.z*1.5)*0.1 + sin(p.x)*0.2;
    p.y=p.y +0.2 + sin(p.y*2.5)*0.2;
  float b=length(p)-0.3;
    q.x-=0.7 - sin(q.z*0.7);
    q.z+=0.15 + sin(q.x)*0.2;
    q.y+=0.1 + sin(q.y*1.0) - sin(q.z*0.5);
  float t=length(q)-0.15;
    q.x-=0.15;
    q.z-=-0.2+ sin(q.z*0.5)*0.1;
    q.y+=0.0;
    return min(min(length(q)-0.2,b),t);
}

float scissors(vec3 p) {
    p.x-=0.95;
    p.y+=0.12;
    p.z+=0.98;
// p+=vec3(-0.95, 0.12, 0.98);

 p.xz=rot2(p.xz, -3.0 ); //rotate outer claw
    vec3 q=p;
    p.x+=-0.8+ sin(2.0+p.z*3.8)*0.8;
    p.y+= sin(p.y*2.5)*0.6;
    /* inner */
q.xz=rot2(q.xz, sin(iGlobalTime*6.0)*0.25+0.1 );    // rotate inner claw
    q.x-=0.5+ sin(q.z*5.8)*0.44;
    q.z+=0.1;
    q.y+=sin(q.y*3.5)*0.6;
    return min(length(p)-0.22,length(q)-0.18);
}
/* chained leg...  
  r.z=rotation on z axis,
  and r.yzw rotate leg joints
*/
float leg(vec3 p, vec4 r) {
    p.x+=0.7-r.x;
    p.y+=0.05;
    p.z-=r.x;
p.xz=rot2(p.xz, r.x );    
p.xy=rot2(p.xy, -1.57+r.y );
    p.y-=0.2;
    float b=sdCylinder(p, vec2(0.03,0.2));
    p.y-=0.18;
p.xy=rot2(p.xy, -1.57+r.z ); 
    p.y-=0.13;
    float m=sdCylinder(p, vec2(0.03,0.13));
    p.y-=0.11;
p.xy=rot2(p.xy, -r.w ); 
    p.y-=0.1;
    float l=sdCylinder(p, vec2(0.02,0.1)) + sin(p.y)*0.1;
    return min(min(b,m),l);
}
/***********************************************/
vec2 DE(vec3 p) {

    float f1=sin((iGlobalTime)*6.0)*0.2+0.1;
    float f2=sin((iGlobalTime+0.4)*6.0)*0.2+0.1;
    float f3=sin((iGlobalTime)*6.0)*0.6+0.3;
    float f4=sin((iGlobalTime+0.8)*6.0)*0.6+0.3;
    
    vec3 q=vec3(-p.x,p.y,p.z);

    float b=min(body(p),eyesticks(p)); 
    float c=min(clamps(p), clamps(q));
    float d=min( min(leg(p, vec4(0.0,f1+0.1,f2+0.2,f4+0.7)), leg(p, vec4(0.15,f2+0.1,f2+0.2,f3+0.7)) ), leg(p, vec4(0.3,f1+0.1,f2+0.2,f4+0.7)));
    float g=min( min(leg(q, vec4(0.0,f2+0.1,f1+0.2,f4+0.7)), leg(q, vec4(0.15,f1+0.1,f1+0.2,f2+0.7)) ), leg(q, vec4(0.3,f2+0.1,f1+0.2,f4+0.7)));
    vec2 m1=vec2(min(b,min(c,min(d,g))),1.0);
    vec2 m2=vec2(min( eyes(p), min(scissors(p),scissors(q)) ), 2.0);
     
//    m1=opU(m1,m2);
    m1=mix(m1, m2, step(m2.x, m1.x));

    /* floor */
    m2=vec2( p.y+0.5, 3.0);
//    m2=vec2( p.y+0.5, 3.0);

//    return opU(m1,m2);
    return mix(m1, m2, step(m2.x, m1.x));
}
/***********************************************/
vec3 normal(vec3 p) {
	vec3 e=vec3(0.01,-0.01,0.0);
	return normalize( vec3(	e.xyy*DE(p+e.xyy).x +	e.yyx*DE(p+e.yyx).x +	e.yxy*DE(p+e.yxy).x +	e.xxx*DE(p+e.xxx).x));
}

/***********************************************/
vec3 tex3D(vec3 pos, vec3 nor, sampler2D s) {
	return texture2D( s, pos.yz).xyz*abs(nor.x)+
	       texture2D( s, pos.xz).xyz*abs(nor.y)+
	       texture2D( s, pos.xy).xyz*abs(nor.z);
}

/***********************************************/
float csh( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k ) {
    float res = 1.0;
    float dt = 0.02;
    float t = mint;
    for( int i=0; i<7; i++ ) {
        float h = DE( ro + rd*t ).x;
        res = min( res, k*h/t );
        t += max( 0.05, dt );
    }
    return clamp( res, 0.0, 1.0 );
}
/***********************************************/
void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
    p.x *= iResolution.x/iResolution.y;	
	vec3 ta = vec3(0.0, 0.0, 0.0);
	vec3 ro =vec3(0.0, 2.0, -3.0);
	vec3 lig=normalize(vec3(0.0, 3.0, 1.0));

//    ro.xz=rot2(ro.xz, iMouse.x/iResolution.x);
    ro.xz=rot2(ro.xz, iGlobalTime*0.2);

	vec3 cf = normalize( ta - ro );
    vec3 cr = normalize( cross(cf,vec3(0.0,1.0,0.0) ) );
    vec3 cu = normalize( cross(cr,cf));
	vec3 rd = normalize( p.x*cr + p.y*cu + 2.5*cf );

	vec3 col=vec3(0.5);
	/* march */
	vec2 r=vec2(0.0);	
	float f=0.0;
	vec3 ww;
	for(int i=0; i<60; i++) {
		ww=ro+rd*f;
		r=DE(ww);		
		if( r.x<0.0 ) break;
		f+=r.x*0.5;
	}
	/* colors */
	if( f<30.0 ) {
		vec3 nor=normal(ww);

		if (r.y==1.0) col=vec3(1.0,0.6,0.3)*tex3D(ww,nor,iChannel0);
		if (r.y==2.0) col=vec3(0.2);
		if (r.y==3.0) {
		                vec3 tmp=vec3(ww.x+iGlobalTime*0.8,ww.yz)*0.1;
		                col=vec3(0.4,0.3,0.3)*tex3D(tmp,nor,iChannel1); 
		              }
		
			float amb =0.2*ww.y;
			float dif =0.7*clamp(dot(lig, nor), 0.0,1.0);
			float bac =0.2*clamp(dot(nor,-lig), 0.0,1.0);
			float sh=csh(ww, lig, 0.05, 1.0, 4.0);
		
		col*=(amb+dif+bac+sh);

	}
	
	fragColor = vec4( col, 1.0 );
}


void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}