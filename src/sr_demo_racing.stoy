uniform vec3 iResolution;           	// viewport resolution (in pixels)
uniform float iGlobalTime;          	// shader playback time (in seconds)
uniform sampler2D iChannel2; 			//! texture["Shadertoy/res/tex03.jpg"]
uniform sampler2D iChannel0; 			//! texture["Shadertoy/res/tex12.png"]

uniform vec3 sandColor; 				//! color[0.8, 0.8, 0.75]
uniform vec3 grassColor; 				//! color[0.22, 0.46, 0.08]

/* raymarching step */
uniform float delt_march; 				//! slider[0.5, 0.8, 1]
uniform float ro_y; 					//! slider[-1, 1.0, 10]
uniform float g_rmEpsilon; 				//! slider[0.001, 0.002, 0.1]
uniform float terrain_var;				//! slider[5, 8, 20]
#define STEPS 		 	256
#define CHANGE_SPEED 	0.06			/* terrain changing speed */
#define VIEW_SCOPE   	2.0				/* view scope. */
#define MINT 			0.001
#define MAXT 			10.0

#define LACU 2.0
#define MAXGRASSSTEEP 0.4
#define MAXGRASSALTITUDE .8
#define MAXSNOWSTEEP   0.35
#define MAXSNOWALTITUDE 0.4
#define NORMALEPSILON 0.02
#define SEALEVEL 0.01 //std 0.3
#define CAMERAALTITUDE 5.3 //std 1.0
#define CAMERASCREENDISTANCE 0.5 //std 0.4
#define LOWITER 5
#define HIGHITER 8
#define COLORITER 5
#define PENUMBRAFACTOR 0.01

vec4 gotcha;

float snoise(vec2 v);

/*
 ****************************************************
 * shade color
 ****************************************************
 */

// value noise, and its analytical derivatives
vec3 noised( in vec2 x )
{
    vec2 p = floor(x);
    vec2 f = fract(x);
    vec2 u = f*f*(3.0-2.0*f);
	float a = texture2D(iChannel0,(p+vec2(0.5,0.5))/256.0,-100.0).x;
	float b = texture2D(iChannel0,(p+vec2(1.5,0.5))/256.0,-100.0).x;
	float c = texture2D(iChannel0,(p+vec2(0.5,1.5))/256.0,-100.0).x;
	float d = texture2D(iChannel0,(p+vec2(1.5,1.5))/256.0,-100.0).x;
	return vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,
				6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));
}

const mat2 m2 = mat2(0.8,-0.6,0.6,0.8);

float detailH( in vec2 x )
{
    float d = 0.0;//50.0*texture2D( iChannel2, x*0.03/SC, 0.0 ).x;
    return d + 0.5*texture2D( iChannel2, x*2.0, 0.0 ).x;
}

float terrainH( in vec2 x )
{
	vec2  p = x * terrain_var;
    float a = 0.0;
    float b = 1.0;
	vec2  d = vec2(0.0);
    for( int i=0; i<15; i++ )
    {
        vec3 n = noised(p);
        d += n.yz;
        a += b*n.x/(1.0+dot(d,d));
		b *= 0.5;
        p = m2*p*2.0;
    }

    float de = detailH(x);
	return a - de;
}

float terrainM( in vec2 x )
{
	vec2  p = x * terrain_var;
    float a = 0.0;
    float b = 1.0;
	vec2  d = vec2(0.0);
    for( int i=0; i<9; i++ )
    {
        vec3 n = noised(p);
        d += n.yz;
        a += b*n.x/(1.0+dot(d,d));
		b *= 0.5;
        p = m2*p*2.0;
    }
	return a - detailH(x);
}

float softShadow(in vec3 ro, in vec3 rd )
{
    // real shadows
    float res = 1.0;
    float t = 0.001;
	for( int i=0; i<80; i++ )
	{
	    vec3  p = ro + t*rd;
        float h = p.y - terrainM( p.xz );
		res = min( res, 16.0*h/t );
		t += h;
		if( res<0.001 ||p.y>(200.0) ) break;
	}
	return clamp( res, 0.0, 1.0 );
}

float fbm( vec2 p )
{
    float f = 0.0;
    f += 0.5000*texture2D( iChannel0, p/256.0 ).x; p = m2*p*2.02;
    f += 0.2500*texture2D( iChannel0, p/256.0 ).x; p = m2*p*2.03;
    f += 0.1250*texture2D( iChannel0, p/256.0 ).x; p = m2*p*2.01;
    f += 0.0625*texture2D( iChannel0, p/256.0 ).x;
    return f/0.9375;
}


vec2 hash2(vec2 p ) {
   return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);
}
float hash(vec2 p) {
  return fract(sin(dot(p, vec2(43.232, 75.876)))*4526.3257);
}

//Based off of iq's described here: http://www.iquilezles.org/www/articles/voronoilin
float voronoi(vec2 p) {
    vec2 n = floor(p);
    vec2 f = fract(p);
    float md = 5.0;
    vec2 m = vec2(0.0);
    for (int i = -1;i<=1;i++) {
        for (int j = -1;j<=1;j++) {
            vec2 g = vec2(i, j);
            vec2 o = hash2(n+g);
            o = 0.5+0.5*sin(iGlobalTime+5.038*o);
            vec2 r = g + o - f;
            float d = dot(r, r);
            if (d<md) {
              md = d;
              m = n+g+o;
            }
        }
    }
    return md;
}

float ov(vec2 p) {
    float v = 0.0;
    float a = 0.4;
    for (int i = 0;i<3;i++) {
        v+= voronoi(p)*a;
        p*=2.0;
        a*=0.5;
    }
    return v;
}

vec4 ripple(in vec2 uv) {
    vec4 a = vec4(0.2, 0.4, 1.0, 1.0);
    vec4 b = vec4(0.85, 0.9, 1.0, 1.0);
	return vec4(mix(a, b, smoothstep(0.0, 0.5, ov(uv*5.0))));
}

/* for a quick peak of the heightmap */
vec3 shade0(vec3 ro, vec3 rd, float t) {
	vec3 pos = ro + t*rd;
	float h = pos.y;
	vec3 color = vec3(0.0);
	if (h > 0.85) {
		color = vec3(255, 255, 255);   	// snow
		color *= h;
	} else if (h > 0.7) {
		color = vec3(171, 171, 171); 	// Mountain
		color *= h;
	} else if (h > 0.4) {
		color = vec3(  45, 163, 18); 	// Grass
		color *= 1.0 - h/2;
	} else if (h > 0.35) {
		color = vec3  (285, 186, 58);	// Sand
		color *= 1.0 - h;
	} else {
		color = vec3(36, 112, 203);		// Sea
		color *= 1/exp(h-1);
	}
	return color/256.0;
}

vec3 calcNormal( in vec3 pos, float t )
{
    vec2  eps = vec2( 2.2*t, 0.0 );
    return normalize( vec3( snoise(pos.xz-eps.xy) - snoise(pos.xz+eps.xy),
                            2.0*eps.x,
							snoise(pos.xz-eps.yx) - snoise(pos.xz+eps.yx) ) );
}

/*
 ****************************************************
 * scene models
 ****************************************************
 */

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec2 pos)
{
  vec3 v = vec3(pos * VIEW_SCOPE, iGlobalTime * CHANGE_SPEED);

  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  float result = 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );

  //result += terrainM(v.xy)/8;
  return result;
 }

/*
 ****************************************************
 * ray marching
 ****************************************************
 */
bool castRay(in vec3 ro, in vec3 rd, out float resT)
{
    float t = MINT;
	for( int i=0; i<STEPS; i++ )
	{
		vec3 p = ro + t*rd;
		float h = p.y - snoise(p.xz);

		if( h<(g_rmEpsilon * t)) {
			resT = t;
			gotcha =  vec4(p.x, p.y, p.z, i);
			return true;
		}else if(t>MAXT) {
			return false;
		}

		t += delt_march * h;
	}
}

/*
 ****************************************************
 * main entry
 ****************************************************
 */
void mainImage(out vec4 fragColor, in vec2 fragCoord) {
	vec2 uv = fragCoord.xy / iResolution.xy;
	uv.y /= iResolution.x/iResolution.y;

	vec3 eye = vec3(0, 0, -1);
	vec3 up = vec3(0, 1, 0);
	vec3 right = vec3(1, 0, 0);
	vec3 front = vec3(0, 0, 1);

	vec3 ro = right * uv.x + front * uv.y;
	ro.y += ro_y;
	vec3 rd = normalize(cross(right, front));

    vec4 color = vec4(0.0); // default black color

    float t;
	if( castRay( ro, rd, t ) )
	{
		fragColor = vec4(shade0( ro, rd, t ), 1.0);
	}
	else
	{
		fragColor = color;
	}
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
