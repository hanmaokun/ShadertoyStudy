/*!
 * <info>
 * <author>consoleartist [ https://www.shadertoy.com/user/consoleartist ]</author>
 * <name>Ray marched scene for beginners</name>
 * 
 * <description>
 *   This one is for beginners and is my first attempt at creating a ray marched
 *   scene. The goals were to setup a navigable camera, construct a simple scene,
 *   and shade it. Next steps are for shadows, reflection, and fog. Nothing special,
 *   this is for us noobs
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/4stGzX</url>
 * 
 * <date>2015-12-29</date>
 * 
 * <tags>raymarch, tutorial, sphere, lambert, plane</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)



//Some of the sources I used to construct this scene:
//Distance Functions (http://iquilezles.org/www/articles/distfunctions/distfunctions.htm)
//https://www.reddit.com/r/twotriangles/comments/1hy5qy/tutorial_1_writing_a_simple_distance_field/

float sphere (vec3 rayPos, vec3 center, float radius) //sphere primitive with offset controls
{
    return length(rayPos - center) - radius;
}


float sdPlane( vec3 rayPos, vec4 n ) //plane primitve with offset controls
{
  rayPos -= vec3(0.0, 0.0, 0.0); //offsets
  n = normalize(n); // orientation of plane, n must be normalized!
  return dot(rayPos,n.xyz) + n.w;
}


float uberSphere(vec3 rayPos) //a more complex sphere shape using booleans
{
   rayPos -= vec3(0.0, sin(iGlobalTime * 2.0), 0.0); //offsets. This makes the entire uber sphere "bounce"
   
   //smaller spheres
   float part_a = min(
                      sphere(rayPos, vec3(-2.0, 0.0, 0.0), 1.0),
                      sphere(rayPos, vec3( 2.0, 0.0, 0.0), 1.0)
                     );
   float part_b = min(
                      sphere(rayPos, vec3(0.0, -2.0, 0.0), 1.0),
                      sphere(rayPos, vec3(0.0,  2.0, 0.0), 1.0)
                     );
   float part_c = min(
                      sphere(rayPos, vec3(0.0, 0.0, -2.0), 1.0),
                      sphere(rayPos, vec3(0.0, 0.0,  2.0), 1.0)
                     );
   
   //larger sphere 
   float part_d = sphere(rayPos, vec3(0.0, 0.0, 0.0), 2.0);
    
   return max(part_d, -min(part_a,min(part_b, part_c))); //a large sphere with smaller ones cut into it.
                  
}

//the final assembled scene
float scene(vec3 rayPos)
{
   float dist_a = sphere(rayPos, vec3(-0.0, -0.0, 0.0), 4.0);
   float dist_b = sdPlane(rayPos, vec4(0.0, 1.0, 0.0, 1.0));
   float booleanFloor = max(dist_b, -dist_a); // this cuts a sphere into the plane
  
   return min(uberSphere(rayPos),booleanFloor); //this combines the floor with our uber sphere for the final scene
}

//scene normals
vec3 normal(vec3 rayPos)
{
    vec3 e = vec3(0.00001, 0.0, 0.0);
    return normalize(vec3(scene(rayPos + e.xyy) - scene(rayPos - e.xyy),
                          scene(rayPos + e.yxy) - scene(rayPos - e.yxy),
                          scene(rayPos + e.yyx) - scene(rayPos - e.yyx)));
}

//Lambert Diffuse Lighting
float diffuse(vec3 normal, vec3 lightVector)
{
    return max(dot(normal, lightVector), 0.0);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // color outs
    vec3 color = vec3(0.0, 0.0, 0.0);
    float alpha = 1.0;
    
    //Scene directional light
    vec3 lightPos = vec3( 5.0, 3.0, 1.0);
    vec3 lightDirection = normalize(lightPos - vec3(0.0, 0.0, 0.0));
    
    
	//Normalized device coordinates and aspect correction   
    vec2 uv = fragCoord.xy / iResolution.xy;   
    uv = uv * 2.0 - 1.0; // remap range from 0...1 to -1...1
    
    float aspectRatio = iResolution.x/ iResolution.y;
    uv.x *= aspectRatio; //aspect correction
    
    //Mouse values for navigation or other shenanigans. Normalized device coords and aspect correction to match UVs
    vec2 daMouse = iMouse.xy/ iResolution.xy;
    daMouse = daMouse * 2.0 - 1.0;
    daMouse.x *= aspectRatio;
   
    // camera controls (horizontal mouse = rotate, vertical mouse = elevation)
    vec3 camControls;
    camControls.x = sin(daMouse.x * 2.0) * 5.0;
    camControls.y = (daMouse.y * 0.5 + 0.5) * 9.0;
    camControls.z = cos(daMouse.x * 2.0) * 5.0;
    
    //mapping camera to UV cordinates
    vec3 cameraOrigin = vec3(camControls); //cam controls
    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);
    vec3 upVector = vec3(0.0, 1.0, 0.0);
    vec3 cameraDirection = normalize(cameraTarget - cameraOrigin);
    vec3 cameraRight = normalize(cross(upVector, cameraOrigin));
    vec3 cameraUp = cross(cameraDirection, -cameraRight); //negate cameraRight to flip properly?
   
    vec3 rayDir = normalize(cameraRight * uv.x + cameraUp * uv.y + cameraDirection);
    
    //Precision value used in the ray marching loop below. This number equals our "surface". If the distance returned from rayPos 
    //to our scene function is less than this then we have "touched" our object and break out of the loop to do normals and lighting
    const float EPSILON = 0.01; 
    
    //inital ray position per pixel. This is the value that gets marched forward and tested    
    vec3 rayPos = cameraOrigin; 
    
    
    
    for (int i = 0; i < 100; i++) // the larger the loop the more accurate/slower the render time
    {
        float dist = scene(rayPos); // plug current rayPos into our scene function
        
        if (dist < EPSILON) //then the ray has hit our surface so we calculate normals and lighting at this point
        {
            color = vec3(diffuse(normal(rayPos), lightDirection));
            break;
        }
        
        rayPos += dist * rayDir; //if nothing is hit we march forward and try again        
    }
    
    fragColor = vec4(color,alpha);//final color output
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}